from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import os
from werkzeug.utils import secure_filename
from flask_migrate import Migrate

# Crear la aplicación Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'supersecreto'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///D:/Inventario/instance/inventario.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_TYPE'] = 'filesystem'

# Inicializar las extensiones
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Inicializar Flask-Migrate
migrate = Migrate(app, db)

# Cargar usuario para Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return Usuario.query.get(int(user_id))

# Modelo de Usuario
class Usuario(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(150), unique=True, nullable=False)
    contrasena = db.Column(db.String(150), nullable=False)
    rol = db.Column(db.String(50), nullable=False)

# Modelo de Producto
class Producto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(150), nullable=False)
    cantidad = db.Column(db.Integer, nullable=False)
    imagen_url = db.Column(db.String(200), nullable=False)
    categoria = db.Column(db.String(100), nullable=False)

@app.route('/producto/<int:id>', methods=['GET'])
def get_producto(id):
    producto = Producto.query.get(id)
    if producto:
        return jsonify({
            'id': producto.id,
            'nombre': producto.nombre,
            'cantidad': producto.cantidad,
            'categoria': producto.categoria,
            'imagen_url': producto.imagen_url
        })
    return jsonify({'error': 'Producto no encontrado'}), 404

@app.route('/eliminar_producto/<int:id>', methods=['GET'])
@login_required
def eliminar_producto(id):
    producto = Producto.query.get(id)
    if producto:
        db.session.delete(producto)
        db.session.commit()
        flash('Producto eliminado exitosamente', 'success')
    return redirect(url_for('index'))

@app.route('/update_quantity', methods=['POST'])
@login_required
def update_quantity():
    producto_id = request.form.get('producto_id')
    action = request.form.get('action')

    producto = Producto.query.get(producto_id)
    if producto:
        if action == 'incrementar':
            producto.cantidad += 1
        elif action == 'decrementar' and producto.cantidad > 0:
            producto.cantidad -= 1
        db.session.commit()
        flash('Cantidad actualizada exitosamente', 'success')
    return redirect(url_for('index'))

@app.route('/agregar_producto', methods=['GET', 'POST'])
@login_required
def agregar_producto():
    if request.method == 'POST':
        nombre = request.form['nombre']
        cantidad = request.form['cantidad']
        imagen = request.files['imagen']
        categoria = request.form['categoria']

        if nombre and cantidad and imagen and categoria:
            if imagen and allowed_file(imagen.filename):
                filename = secure_filename(imagen.filename)
                imagen.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))

                nuevo_producto = Producto(nombre=nombre, cantidad=int(cantidad), imagen_url=filename, categoria=categoria)
                db.session.add(nuevo_producto)
                db.session.commit()

                flash('Producto agregado exitosamente', 'success')
                return redirect(url_for('index'))
            else:
                flash('Imagen no válida', 'danger')
    return render_template('agregar_producto.html')

@app.route('/')
@app.route('/index')
@app.route('/index/<categoria>')
def index(categoria=None):
    if categoria:
        productos = Producto.query.filter_by(categoria=categoria).all()
    else:
        productos = Producto.query.all()

    productos_out_of_stock = Producto.query.filter_by(cantidad=0).all()
    return render_template('index.html', productos=productos, categoria=categoria, productos_out_of_stock=productos_out_of_stock)
